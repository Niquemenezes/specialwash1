# src/app.py
import os
from dotenv import load_dotenv
from flask import Flask, jsonify, send_from_directory, request, make_response
from flask_cors import CORS
from flask_migrate import Migrate
from flask_jwt_extended import JWTManager
from flasgger import Swagger

from api.utils import APIException, generate_sitemap
from api.routes import api
from api.admin import setup_admin
from api.models import db  # <-- importa db SOLO una vez

# ===== Cargar .env =====
load_dotenv()

# ===== Crear la app =====
app = Flask(__name__)

# ===== Config básica =====
# Prioriza DATABASE_URL (Render/Heroku), si no existe usa SQLALCHEMY_DATABASE_URI, si no, SQLite local.
db_url = os.getenv("DATABASE_URL") or os.getenv("SQLALCHEMY_DATABASE_URI") or "sqlite:///dev.db"
# Heroku legado "postgres://"
if db_url.startswith("postgres://"):
    db_url = db_url.replace("postgres://", "postgresql://", 1)

app.config["SQLALCHEMY_DATABASE_URI"] = db_url
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
app.config["JWT_SECRET_KEY"] = os.getenv("JWT_SECRET_KEY", "change-me-in-prod")
app.config["JSON_SORT_KEYS"] = False

# ===== Paths estáticos =====
ENV = "development" if os.getenv("FLASK_DEBUG") == "1" else "production"
static_file_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), "../public/")

# ===== Extensiones =====
db.init_app(app)
migrate = Migrate(app, db, compare_type=True)
jwt = JWTManager(app)
swagger = Swagger(app)

# ===== CORS (permitiendo cookies) =====
_ALLOWED_ORIGINS = {
    os.environ.get("FRONTEND_ORIGIN", "http://localhost:3000"),
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3001",
}
CORS(
    app,
    resources={r"/api/*": {
        "origins": list(_ALLOWED_ORIGINS),
        "methods": ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"],
        "supports_credentials": True,
    }},
)

@app.after_request
def _add_cors_headers(resp):
    origin = request.headers.get("Origin")
    if origin in _ALLOWED_ORIGINS:
        resp.headers["Access-Control-Allow-Origin"] = origin
        resp.headers["Vary"] = "Origin"
        resp.headers["Access-Control-Allow-Credentials"] = "true"
        resp.headers["Access-Control-Allow-Headers"] = "Content-Type, Authorization"
        resp.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, PATCH, DELETE, OPTIONS"
    return resp

@app.route("/api/<path:_subpath>", methods=["OPTIONS"])
def _cors_options(_subpath):
    return _add_cors_headers(make_response("", 204))

# ===== Admin y Blueprints =====
setup_admin(app)
app.register_blueprint(api, url_prefix="/api")

# ===== Manejo de errores =====
@app.errorhandler(APIException)
def handle_invalid_usage(error):
    return jsonify(error.to_dict()), error.status_code

# ===== Rutas básicas =====
@app.get("/health")
def health():
    return jsonify(ok=True)

@app.route("/")
def sitemap():
    if ENV == "development":
        return generate_sitemap(app)
    return send_from_directory(static_file_dir, "index.html")

@app.route("/<path:path>", methods=["GET", "POST"])
def serve_any_other_file(path):
    file_path = os.path.join(static_file_dir, path)
    if not os.path.isfile(file_path):
        path = "index.html"
    response = send_from_directory(static_file_dir, path)
    response.cache_control.max_age = 0
    return response

@app.get("/home")
def home():
    return "API funcionando correctamente"

# ===== Entry point =====
if __name__ == "__main__":
    # Crea tablas si usas SQLite sin migraciones (no molesta en Postgres)
    with app.app_context():
        db.create_all()
    PORT = int(os.environ.get("PORT", 3001))
    app.run(host="0.0.0.0", port=PORT, debug=True)
